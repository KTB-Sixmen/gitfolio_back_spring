package com.be.gitfolio.resume.mock;

import com.be.gitfolio.resume.domain.Like;
import com.be.gitfolio.resume.service.port.LikeRepository;

import java.util.ArrayList;
import java.util.List;
import java.util.Objects;
import java.util.Optional;

public class FakeLikeRepository implements LikeRepository {

    private Long autoGeneratedId = 0L;
    private List<Like> data = new ArrayList<>();

    public List<Like> findByResumeId(String resumeId) {
        return data.stream()
                .filter(item -> Objects.equals(item.getResumeId(), resumeId))
                .toList();
    }

    @Override
    public List<String> findLikedResumeIdsByMemberId(Long memberId) {
        return data.stream()
                .filter(item -> Objects.equals(item.getMemberId(), memberId))
                .map(Like::getResumeId)
                .toList();
    }

    @Override
    public List<String> findLikedResumeIdsByMemberIdAndResumeIds(Long memberId, List<String> resumeIds) {
        return data.stream()
                .filter(item -> Objects.equals(item.getMemberId(), memberId) && resumeIds.contains(item.getResumeId()))
                .map(Like::getResumeId)
                .toList();
    }

    @Override
    public boolean existsByResumeIdAndMemberId(String resumeId, Long memberId) {
        return data.stream()
                .anyMatch(item -> Objects.equals(item.getResumeId(), resumeId) && Objects.equals(item.getMemberId(), memberId));
    }

    @Override
    public List<Like> findLikesByMemberIdAndResumeIds(Long memberId, List<String> resumeIds) {
        return data.stream()
                .filter(item -> Objects.equals(item.getMemberId(), memberId) && resumeIds.contains(item.getResumeId()))
                .toList();
    }

    @Override
    public void deleteLikesByResumeId(String resumeId) {
        data.removeIf(item -> Objects.equals(item.getResumeId(), resumeId));
    }

    @Override
    public Optional<Like> findByResumeIdAndMemberId(String resumeId, Long memberId) {
        return data.stream()
                .filter(item -> Objects.equals(item.getResumeId(), resumeId) && Objects.equals(item.getMemberId(), memberId))
                .findAny();
    }

    @Override
    public void deleteByResumeIdAndMemberId(String resumeId, Long memberId) {
        data.removeIf(item -> Objects.equals(item.getResumeId(), resumeId) && Objects.equals(item.getMemberId(), memberId));
    }

    @Override
    public Like save(Like like) {
        if (like.getId() == null || like.getId() == 0L) {
            Like newLike = Like.builder()
                    .id(++autoGeneratedId)
                    .memberId(like.getMemberId())
                    .resumeId(like.getResumeId())
                    .build();
            data.add(newLike);
            return newLike;
        } else {
            data.removeIf(item -> Objects.equals(item.getId(), like.getId()));
            data.add(like);
            return like;
        }
    }

    @Override
    public void deleteAllByMemberId(Long memberId) {
        data.removeIf(item -> Objects.equals(item.getMemberId(), memberId));
    }
}
