package com.be.gitfolio.resume.mock;

import com.be.gitfolio.resume.domain.Comment;
import com.be.gitfolio.resume.service.port.CommentRepository;

import java.util.ArrayList;
import java.util.List;
import java.util.Objects;
import java.util.Optional;

public class FakeCommentRepository implements CommentRepository {

    private Long autoGeneratedId = 0L;
    private List<Comment> data = new ArrayList<>();

    @Override
    public Comment save(Comment comment) {
        if (comment.getId() == null || comment.getId() == 0L) {
            Comment newComment = Comment.builder()
                    .id(++autoGeneratedId)
                    .memberId(comment.getMemberId())
                    .resumeId(comment.getResumeId())
                    .content(comment.getContent())
                    .build();
            data.add(newComment);
            return newComment;
        } else {
            data.removeIf(item -> Objects.equals(item.getId(), comment.getId()));
            data.add(comment);
            return comment;
        }
    }

    @Override
    public Optional<Comment> findById(Long commentId) {
        return data.stream()
                .filter(item -> Objects.equals(item.getId(), commentId))
                .findAny();
    }

    @Override
    public void deleteById(Long commentId) {
        data.removeIf(item -> Objects.equals(item.getId(), commentId));
    }

    @Override
    public List<Comment> findAllByResumeId(String resumeId) {
        return data.stream()
                .filter(item -> Objects.equals(item.getResumeId(), resumeId))
                .toList();
    }

    @Override
    public void deleteCommentsByResumeId(String resumeId) {
        data.removeIf(item -> Objects.equals(item.getResumeId(), resumeId));
    }
}
