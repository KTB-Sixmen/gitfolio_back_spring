package com.be.gitfolio.member.mock;

import com.be.gitfolio.common.type.PaidPlan;
import com.be.gitfolio.member.domain.Member;
import com.be.gitfolio.member.service.port.MemberRepository;

import java.util.*;

public class FakeMemberRepository implements MemberRepository {

    private Long autoGeneratedId = 0L;
    private final List<Member> data = new ArrayList<>();

    @Override
    public Member save(Member member) {
        if (member.getId() == null || member.getId() == 0L) {
            Member newMember = Member.builder()
                    .id(++autoGeneratedId)
                    .username(member.getUsername())
                    .nickname(member.getNickname())
                    .githubName(member.getGithubName())
                    .role(member.getRole())
                    .avatarUrl(member.getAvatarUrl())
                    .paidPlan(PaidPlan.FREE)
                    .build();
            data.add(newMember);
            return newMember;
        } else {
            data.removeIf(item -> Objects.equals(item.getId(), member.getId()));
            data.add(member);
            return member;
        }
    }

    @Override
    public Optional<Member> findByUsername(String username) {
        return data.stream().filter(item -> item.getUsername() != null && item.getUsername().equals(username)).findAny();
    }

    @Override
    public Optional<Member> findById(Long memberId) {
        return data.stream().filter(item -> item.getId() != null && item.getId().equals(memberId)).findAny();
    }

    @Override
    public void deleteById(Long memberId) {
        data.removeIf(item -> item.getId() != null &&item.getId().equals(memberId));
    }
}
