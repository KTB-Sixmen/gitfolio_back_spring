spring:
  # .env import
  config:
    import: optional:file:.env[.properties]
  data:
    mongodb:
      uri: mongodb://${MEMBER_MONGO_DB_USERNAME}:${MEMBER_MONGO_DB_PORT}/${MEMBER_MONGO_DB_DATABASE}
    redis:
      host: ${RESUME_REDIS_HOST}
      port: ${RESUME_REDIS_PORT}
  datasource:
    driver-class-name: com.mysql.cj.jdbc.Driver
    url: jdbc:mysql://${MEMBER_MYSQL_DB_HOST}:${MEMBER_MYSQL_DB_PORT}/${MEMBER_MYSQL_DB_NAME}?serverTimezone=UTC&characterEncoding=UTF-8
    username: ${MEMBER_MYSQL_DB_USERNAME}
    password: ${MEMBER_MYSQL_DB_PASSWORD}

  batch:
    job:
      enabled: false
    jdbc:
      initialize-schema: always
      schema: classpath:org/springframework/batch/core/schema-mysql.sql

  kafka:
    bootstrap-servers: ${KAFKA_HOST1}:${KAFKA_PORT1}
    consumer:
      group-id: member-group
      auto-offset-reset: earliest
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.springframework.kafka.support.serializer.JsonDeserializer
      properties:
        spring.json.trusted.packages: '*'

  jpa:
    database-platform: org.hibernate.dialect.MySQLDialect
    hibernate:
      ddl-auto: update
    properties:
      hibernate:
        dialect: org.hibernate.dialect.MySQLDialect
        format_sql: true
        show_sql: true

  servlet:
    multipart:
      enabled: true
      max-request-size: 30MB
      max-file-size: 30MB
      resolve-lazily: true

  jwt:
    secret: ${JWT_SECRET_KEY}

cloud:
  aws:
    s3:
      bucket: gitfolio
      url-prefix: ${S3_URL_PREFIX}
    stack.auto: false
    region.static: ap-northeast-2
    credentials:
      accessKey: ${S3_ACCESS_KEY}
      secretKey: ${S3_SECRET_KEY}

github:
  api:
    url: https://api.github.com
    token: ${GH_API_TOKEN}
member:
  server:
    url: ${MEMBER_SERVER_URL}
kakao:
  api:
    url: ${KAKAO_API_URL}
ai:
  server:
    url: ${AI_SERVER_URL}
notification:
  server:
    url: ${NOTIFICATION_SERVER_URL}

jwt:
  refreshToken:
    expiry: ${REFRESH_TOKEN_EXPIRY}

server:
  port: ${MEMBER_SERVER_PORT}