name: Backend CI/CD Pipeline

on:
  push:
    branches:
      - 48-Develop브랜치-푸시시-CI/CD-구현

jobs:
  build_and_deploy:
    name: Build and Deploy Modules
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - module: auth
            dockerfile_path: ./gitfolio-auth/dockerfile
            build_context: ./gitfolio-auth
            image_name: aida0/gitfolio_auth:test
            instance_index: '1'
          - module: member
            dockerfile_path: ./gitfolio-member/dockerfile
            build_context: ./gitfolio-member
            image_name: aida0/gitfolio_member:test
            instance_index: '1'
          - module: payment
            dockerfile_path: ./gitfolio-payment/dockerfile
            build_context: ./gitfolio-payment
            image_name: aida0/gitfolio_payment:test
            instance_index: '2'
          - module: resume
            dockerfile_path: ./gitfolio-resume/dockerfile
            build_context: ./gitfolio-resume
            image_name: aida0/gitfolio_resume:test
            instance_index: '2'
          - module: notification
            dockerfile_path: ./gitfolio-notification/dockerfile
            build_context: ./gitfolio-notification
            image_name: aida0/gitfolio_notification:test
            instance_index: '3'
          - module: chat
            dockerfile_path: ./gitfolio-chat/dockerfile
            build_context: ./gitfolio-chat
            image_name: aida0/gitfolio_chat:test
            instance_index: '4'
#  '48-Develop브랜치')의 코드를 GitHub Actions 실행 환경으로 복사
#    그동안 localhost 8080 에 떳었던 이유는 develop 브랜치가 아닌 내 브랜치의 코드를 가져와서 그랬음
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-northeast-2

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      - name: Build the Docker image
        run: |
          docker build \
            -f ${{ matrix.dockerfile_path }} \
            -t ${{ matrix.image_name }} \
            ${{ matrix.build_context }}

      - name: Push the Docker image
        run: |
          docker push ${{ matrix.image_name }}

      - name: Get EC2 Instance IDs
        id: get_instances
        run: |
          INSTANCE_IDS=$(aws ec2 describe-instances \
            --region ap-northeast-2 \
            --filters 'Name=tag:Service,Values=back' \
              'Name=tag:Index,Values=${{ matrix.instance_index }}' \
              'Name=tag:Environment,Values=dev' \
              'Name=instance-state-name,Values=running' \
              'Name=tag:Type,Values=ec2' \
            --query 'Reservations[].Instances[].InstanceId' \
            --output text)
          echo "INSTANCE_IDS=$INSTANCE_IDS"
          echo "instance_ids=$INSTANCE_IDS" >> $GITHUB_OUTPUT

      - name: Update .env file on EC2 instances
        run: |
          ENV_CONTENT=$(echo "${{ secrets.ENV }}" | base64)
    
          # AWS Systems Manager를 통해 인코딩된 환경 변수를 EC2 인스턴스로 전송
          aws ssm send-command \
          --instance-ids "${{ steps.get_instances.outputs.instance_ids }}" \
          --document-name "AWS-RunShellScript" \
          --comment "Updating .env for ${{ matrix.module }} module" \
          --parameters commands="echo ${ENV_CONTENT} | base64 -d > /home/ec2-user/.env" \
          --timeout-seconds 600 \
          --region ap-northeast-2

      - name: Deploy to EC2 instances
        run: |
          if [ -z "${{ steps.get_instances.outputs.instance_ids }}" ]; then
            echo "No instance IDs found for ${{ matrix.module }} module. Exiting."
            exit 1
          fi
          aws ssm send-command \
            --instance-ids "${{ steps.get_instances.outputs.instance_ids }}" \
            --document-name "AWS-RunShellScript" \
            --comment "Deploying ${{ matrix.module }} module" \
            --parameters commands='cd /home/ec2-user && docker-compose down -v --rmi all && docker-compose pull && docker-compose up -d' \
            --timeout-seconds 600 \
            --region ap-northeast-2

      - name: Wait for command to complete
        run: |
          echo "Deployment command sent for ${{ matrix.module }} module."