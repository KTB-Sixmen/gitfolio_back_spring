name: Backend CI/CD Pipeline

on:
  push:
    branches:
      - 48-Develop브랜치-푸시시-CI/CD-구현

jobs:
  build_and_deploy:
    name: Build and Deploy Modules
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - module: auth
            dockerfile_path: ./gitfolio-auth/dockerfile
            build_context: ./gitfolio-auth
            image_name: aida0/gitfolio_auth:test
            instance_index: '1'
          - module: member
            dockerfile_path: ./gitfolio-member/dockerfile
            build_context: ./gitfolio-member
            image_name: aida0/gitfolio_member:test
            instance_index: '1'
          - module: payment
            dockerfile_path: ./gitfolio-payment/dockerfile
            build_context: ./gitfolio-payment
            image_name: aida0/gitfolio_payment:test
            instance_index: '2'
          - module: resume
            dockerfile_path: ./gitfolio-resume/dockerfile
            build_context: ./gitfolio-resume
            image_name: aida0/gitfolio_resume:test
            instance_index: '2'
          - module: notification
            dockerfile_path: ./gitfolio-notification/dockerfile
            build_context: ./gitfolio-notification
            image_name: aida0/gitfolio_notification:test
            instance_index: '3'
          - module: chat
            dockerfile_path: ./gitfolio-chat/dockerfile
            build_context: ./gitfolio-chat
            image_name: aida0/gitfolio_chat:test
            instance_index: '4'
#  '48-Develop브랜치')의 코드를 GitHub Actions 실행 환경으로 복사
#    그동안 localhost 8080 에 떳었던 이유는 develop 브랜치가 아닌 내 브랜치의 코드를 가져와서 그랬음
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-northeast-2

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      - name: Build the Docker image
        run: |
          docker build \
            -f ${{ matrix.dockerfile_path }} \
            -t ${{ matrix.image_name }} \
            ${{ matrix.build_context }}

      - name: Push the Docker image
        run: |
          docker push ${{ matrix.image_name }}

      - name: Get EC2 Instance IDs
        id: get_instances
        run: |
          INSTANCE_IDS=$(aws ec2 describe-instances \
            --region ap-northeast-2 \
            --filters 'Name=tag:Service,Values=back' \
              'Name=tag:Index,Values=${{ matrix.instance_index }}' \
              'Name=tag:Environment,Values=dev' \
              'Name=instance-state-name,Values=running' \
              'Name=tag:Type,Values=ec2' \
            --query 'Reservations[].Instances[].InstanceId' \
            --output text)
          echo "INSTANCE_IDS=$INSTANCE_IDS"
          echo "instance_ids=$INSTANCE_IDS" >> $GITHUB_OUTPUT

      - name: Update .env file on EC2 instances
        run: |
          aws ssm send-command \
            --instance-ids "${{ steps.get_instances.outputs.instance_ids }}" \
            --document-name "AWS-RunShellScript" \
            --comment "Updating .env for ${{ matrix.module }} module" \
            --parameters commands="
            cat <<EOF > /home/ec2-user/.env
            # URL Configuration
            REDIRECT_ONBOARDING_URL=${{ secrets.REDIRECT_ONBOARDING_URL }}
            REDIRECT_MAIN_URL=${{ secrets.REDIRECT_MAIN_URL }}
            MEMBER_SERVER_URL=${{ secrets.MEMBER_SERVER_URL }}
            PAYMENT_SERVER_URL=${{ secrets.PAYMENT_SERVER_URL }}
            AI_SERVER_URL=${{ secrets.AI_SERVER_URL }}
            
            # gRPC Configuration
            MEMBER_GRPC_PORT=${{ secrets.MEMBER_GRPC_PORT }}
            
            # Server Ports
            AUTH_SERVER_PORT=${{ secrets.AUTH_SERVER_PORT }}
            MEMBER_SERVER_PORT=${{ secrets.MEMBER_SERVER_PORT }}
            RESUME_SERVER_PORT=${{ secrets.RESUME_SERVER_PORT }}
            PAYMENT_SERVER_PORT=${{ secrets.PAYMENT_SERVER_PORT }}
            NOTIFICATION_SERVER_PORT=${{ secrets.NOTIFICATION_SERVER_PORT }}
            CHAT_SERVER_PORT=${{ secrets.CHAT_SERVER_PORT }}
            
            # GitHub OAuth Configuration
            GH_CLIENT_ID=${{ secrets.GH_CLIENT_ID }}
            GH_CLIENT_SECRET=${{ secrets.GH_CLIENT_SECRET }}
            GH_REDIRECT_URI=${{ secrets.GH_REDIRECT_URI }}
            GH_API_TOKEN=${{ secrets.GH_API_TOKEN }}
            
            # JWT Configuration
            JWT_SECRET_KEY=${{ secrets.JWT_SECRET_KEY }}
            ACCESS_TOKEN_EXPIRY=${{ secrets.ACCESS_TOKEN_EXPIRY }}
            REFRESH_TOKEN_EXPIRY=${{ secrets.REFRESH_TOKEN_EXPIRY }}
            
            # Redis Configuration
            AUTH_REDIS_HOST=${{ secrets.AUTH_REDIS_HOST }}
            AUTH_REDIS_PORT=${{ secrets.AUTH_REDIS_PORT }}
            RESUME_REDIS_HOST=${{ secrets.RESUME_REDIS_HOST }}
            RESUME_REDIS_PORT=${{ secrets.RESUME_REDIS_PORT }}
            
            # MySQL Configuration
            MEMBER_MYSQL_DB_HOST=${{ secrets.MEMBER_MYSQL_DB_HOST }}
            MEMBER_MYSQL_DB_PORT=${{ secrets.MEMBER_MYSQL_DB_PORT }}
            MEMBER_MYSQL_DB_NAME=${{ secrets.MEMBER_MYSQL_DB_NAME }}
            MEMBER_MYSQL_DB_PASSWORD=${{ secrets.MEMBER_MYSQL_DB_PASSWORD }}
            MEMBER_MYSQL_DB_USERNAME=${{ secrets.MEMBER_MYSQL_DB_USERNAME }}
            
            LIKE_MYSQL_DB_HOST=${{ secrets.LIKE_MYSQL_DB_HOST }}
            LIKE_MYSQL_DB_PORT=${{ secrets.LIKE_MYSQL_DB_PORT }}
            LIKE_MYSQL_DB_NAME=${{ secrets.LIKE_MYSQL_DB_NAME }}
            LIKE_MYSQL_DB_PASSWORD=${{ secrets.LIKE_MYSQL_DB_PASSWORD }}
            LIKE_MYSQL_DB_USERNAME=${{ secrets.LIKE_MYSQL_DB_USERNAME }}
            
            PAYMENT_MYSQL_DB_HOST=${{ secrets.PAYMENT_MYSQL_DB_HOST }}
            PAYMENT_MYSQL_DB_PORT=${{ secrets.PAYMENT_MYSQL_DB_PORT }}
            PAYMENT_MYSQL_DB_NAME=${{ secrets.PAYMENT_MYSQL_DB_NAME }}
            PAYMENT_MYSQL_DB_PASSWORD=${{ secrets.PAYMENT_MYSQL_DB_PASSWORD }}
            PAYMENT_MYSQL_DB_USERNAME=${{ secrets.PAYMENT_MYSQL_DB_USERNAME }}
            
            NOTIFICATION_MYSQL_DB_HOST=${{ secrets.NOTIFICATION_MYSQL_DB_HOST }}
            NOTIFICATION_MYSQL_DB_PORT=${{ secrets.NOTIFICATION_MYSQL_DB_PORT }}
            NOTIFICATION_MYSQL_DB_NAME=${{ secrets.NOTIFICATION_MYSQL_DB_NAME }}
            NOTIFICATION_MYSQL_DB_PASSWORD=${{ secrets.NOTIFICATION_MYSQL_DB_PASSWORD }}
            NOTIFICATION_MYSQL_DB_USERNAME=${{ secrets.NOTIFICATION_MYSQL_DB_USERNAME }}
            
            # MongoDB Configuration
            MEMBER_MONGO_DB_USERNAME=${{ secrets.MEMBER_MONGO_DB_USERNAME }}
            MEMBER_MONGO_DB_PORT=${{ secrets.MEMBER_MONGO_DB_PORT }}
            MEMBER_MONGO_DB_DATABASE=${{ secrets.MEMBER_MONGO_DB_DATABASE }}
            
            RESUME_MONGO_DB_USERNAME=${{ secrets.RESUME_MONGO_DB_USERNAME }}
            RESUME_MONGO_DB_PORT=${{ secrets.RESUME_MONGO_DB_PORT }}
            RESUME_MONGO_DB_DATABASE=${{ secrets.RESUME_MONGO_DB_DATABASE }}
            
            CHAT_MONGO_DB_USERNAME=${{ secrets.CHAT_MONGO_DB_USERNAME }}
            CHAT_MONGO_DB_PORT=${{ secrets.CHAT_MONGO_DB_PORT }}
            CHAT_MONGO_DB_DATABASE=${{ secrets.CHAT_MONGO_DB_DATABASE }}
            
            # AWS S3 Configuration
            S3_ACCESS_KEY=${{ secrets.S3_ACCESS_KEY }}
            S3_SECRET_KEY=${{ secrets.S3_SECRET_KEY }}
            S3_URL_PREFIX=${{ secrets.S3_URL_PREFIX }}
            
            # Kakao Pay Configuration
            KAKAO_API_URL=${{ secrets.KAKAO_API_URL }}
            KAKAOPAY_SECRET_KEY=${{ secrets.KAKAOPAY_SECRET_KEY }}
            
            # Kafka Configuration
            KAFKA_HOST1=${{ secrets.KAFKA_HOST1 }}
            KAFKA_PORT1=${{ secrets.KAFKA_PORT1 }}
            KAFKA_BROKER_ID=${{ secrets.KAFKA_BROKER_ID }}
            KAFKA_EXTERNAL_HOST=${{ secrets.KAFKA_EXTERNAL_HOST }}
            KAFKA_INTERNAL_PORT=${{ secrets.KAFKA_INTERNAL_PORT }}
            KAFKA_EXTERNAL_PORT=${{ secrets.KAFKA_EXTERNAL_PORT }}
            KAFKA_ZOOKEEPER_PORT=${{ secrets.KAFKA_ZOOKEEPER_PORT }}
          
            KAFKA_INTER_BROKER_LISTENER_NAME=${{ secrets.KAFKA_INTER_BROKER_LISTENER_NAME }}
            KAFKA_ZOOKEEPER_CONNECT=${{ secrets.KAFKA_ZOOKEEPER_CONNECT }}
            KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR=${{ secrets.KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR }}
            EOF
            " \
            --timeout-seconds 600 \
            --region ap-northeast-2
          

      - name: Deploy to EC2 instances
        run: |
          if [ -z "${{ steps.get_instances.outputs.instance_ids }}" ]; then
            echo "No instance IDs found for ${{ matrix.module }} module. Exiting."
            exit 1
          fi
          aws ssm send-command \
            --instance-ids "${{ steps.get_instances.outputs.instance_ids }}" \
            --document-name "AWS-RunShellScript" \
            --comment "Deploying ${{ matrix.module }} module" \
            --parameters commands='cd /home/ec2-user && docker-compose down -v --rmi all && docker-compose pull && docker-compose up -d' \
            --timeout-seconds 600 \
            --region ap-northeast-2

      - name: Wait for command to complete
        run: |
          echo "Deployment command sent for ${{ matrix.module }} module."