name: Backend CI/CD Pipeline

on:
  push:
    branches:
      - 48-Develop브랜치-푸시시-CI/CD-구현

jobs:
  build_and_deploy:
    name: Build and Deploy Modules
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - module: auth
            dockerfile_path: ./gitfolio-auth/Dockerfile
            build_context: ./gitfolio-auth
            image_name: aida0/gitfolio_auth:test
            instance_index: '1'
          - module: member
            dockerfile_path: ./gitfolio-member/Dockerfile
            build_context: ./gitfolio-member
            image_name: aida0/gitfolio_member:test
            instance_index: '1'
          - module: payment
            dockerfile_path: ./gitfolio-payment/Dockerfile
            build_context: ./gitfolio-payment
            image_name: aida0/gitfolio_payment:test
            instance_index: '2'
          - module: resume
            dockerfile_path: ./gitfolio-resume/Dockerfile
            build_context: ./gitfolio-resume
            image_name: aida0/gitfolio_resume:test
            instance_index: '2'

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-northeast-2

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      - name: Build the Docker image
        run: |
          docker build \
            --build-arg REDIRECT_ONBOARDING_URL=${{ secrets.REDIRECT_ONBOARDING_URL }} \
            --build-arg REDIRECT_MAIN_URL=${{ secrets.REDIRECT_MAIN_URL }} \
            --build-arg MEMBER_SERVER_URL=${{ secrets.MEMBER_SERVER_URL }} \
            --build-arg PAYMENT_SERVER_URL=${{ secrets.PAYMENT_SERVER_URL }} \
            --build-arg AI_SERVER_URL=${{ secrets.AI_SERVER_URL }} \
            --build-arg MEMBER_GRPC_PORT=${{ secrets.MEMBER_GRPC_PORT }} \
            --build-arg AUTH_SERVER_PORT=${{ secrets.AUTH_SERVER_PORT }} \
            --build-arg MEMBER_SERVER_PORT=${{ secrets.MEMBER_SERVER_PORT }} \
            --build-arg RESUME_SERVER_PORT=${{ secrets.RESUME_SERVER_PORT }} \
            --build-arg PAYMENT_SERVER_PORT=${{ secrets.PAYMENT_SERVER_PORT }} \
            --build-arg NOTIFICATION_SERVER_PORT=${{ secrets.NOTIFICATION_SERVER_PORT }} \
            --build-arg CHAT_SERVER_PORT=${{ secrets.CHAT_SERVER_PORT }} \
            --build-arg GH_CLIENT_ID=${{ secrets.GH_CLIENT_ID }} \
            --build-arg GH_CLIENT_SECRET=${{ secrets.GH_CLIENT_SECRET }} \
            --build-arg GH_REDIRECT_URI=${{ secrets.GH_REDIRECT_URI }} \
            --build-arg GH_API_TOKEN=${{ secrets.GH_API_TOKEN }} \
            --build-arg JWT_SECRET_KEY=${{ secrets.JWT_SECRET_KEY }} \
            --build-arg ACCESS_TOKEN_EXPIRY=${{ secrets.ACCESS_TOKEN_EXPIRY }} \
            --build-arg REFRESH_TOKEN_EXPIRY=${{ secrets.REFRESH_TOKEN_EXPIRY }} \
            --build-arg AUTH_REDIS_HOST=${{ secrets.AUTH_REDIS_HOST }} \
            --build-arg AUTH_REDIS_PORT=${{ secrets.AUTH_REDIS_PORT }} \
            --build-arg RESUME_REDIS_HOST=${{ secrets.RESUME_REDIS_HOST }} \
            --build-arg RESUME_REDIS_PORT=${{ secrets.RESUME_REDIS_PORT }} \
            --build-arg MEMBER_MYSQL_DB_HOST=${{ secrets.MEMBER_MYSQL_DB_HOST }} \
            --build-arg MEMBER_MYSQL_DB_PORT=${{ secrets.MEMBER_MYSQL_DB_PORT }} \
            --build-arg MEMBER_MYSQL_DB_NAME=${{ secrets.MEMBER_MYSQL_DB_NAME }} \
            --build-arg MEMBER_MYSQL_DB_PASSWORD=${{ secrets.MEMBER_MYSQL_DB_PASSWORD }} \
            --build-arg MEMBER_MYSQL_DB_USERNAME=${{ secrets.MEMBER_MYSQL_DB_USERNAME }} \
            --build-arg LIKE_MYSQL_DB_HOST=${{ secrets.LIKE_MYSQL_DB_HOST }} \
            --build-arg LIKE_MYSQL_DB_PORT=${{ secrets.LIKE_MYSQL_DB_PORT }} \
            --build-arg LIKE_MYSQL_DB_NAME=${{ secrets.LIKE_MYSQL_DB_NAME }} \
            --build-arg LIKE_MYSQL_DB_PASSWORD=${{ secrets.LIKE_MYSQL_DB_PASSWORD }} \
            --build-arg LIKE_MYSQL_DB_USERNAME=${{ secrets.LIKE_MYSQL_DB_USERNAME }} \
            --build-arg PAYMENT_MYSQL_DB_HOST=${{ secrets.PAYMENT_MYSQL_DB_HOST }} \
            --build-arg PAYMENT_MYSQL_DB_PORT=${{ secrets.PAYMENT_MYSQL_DB_PORT }} \
            --build-arg PAYMENT_MYSQL_DB_NAME=${{ secrets.PAYMENT_MYSQL_DB_NAME }} \
            --build-arg PAYMENT_MYSQL_DB_PASSWORD=${{ secrets.PAYMENT_MYSQL_DB_PASSWORD }} \
            --build-arg PAYMENT_MYSQL_DB_USERNAME=${{ secrets.PAYMENT_MYSQL_DB_USERNAME }} \
            --build-arg NOTIFICATION_MYSQL_DB_HOST=${{ secrets.NOTIFICATION_MYSQL_DB_HOST }} \
            --build-arg NOTIFICATION_MYSQL_DB_PORT=${{ secrets.NOTIFICATION_MYSQL_DB_PORT }} \
            --build-arg NOTIFICATION_MYSQL_DB_NAME=${{ secrets.NOTIFICATION_MYSQL_DB_NAME }} \
            --build-arg NOTIFICATION_MYSQL_DB_PASSWORD=${{ secrets.NOTIFICATION_MYSQL_DB_PASSWORD }} \
            --build-arg NOTIFICATION_MYSQL_DB_USERNAME=${{ secrets.NOTIFICATION_MYSQL_DB_USERNAME }} \
            --build-arg MEMBER_MONGO_DB_USERNAME=${{ secrets.MEMBER_MONGO_DB_USERNAME }} \
            --build-arg MEMBER_MONGO_DB_PORT=${{ secrets.MEMBER_MONGO_DB_PORT }} \
            --build-arg MEMBER_MONGO_DB_DATABASE=${{ secrets.MEMBER_MONGO_DB_DATABASE }} \
            --build-arg RESUME_MONGO_DB_USERNAME=${{ secrets.RESUME_MONGO_DB_USERNAME }} \
            --build-arg RESUME_MONGO_DB_PORT=${{ secrets.RESUME_MONGO_DB_PORT }} \
            --build-arg RESUME_MONGO_DB_DATABASE=${{ secrets.RESUME_MONGO_DB_DATABASE }} \
            --build-arg CHAT_MONGO_DB_USERNAME=${{ secrets.CHAT_MONGO_DB_USERNAME }} \
            --build-arg CHAT_MONGO_DB_PORT=${{ secrets.CHAT_MONGO_DB_PORT }} \
            --build-arg CHAT_MONGO_DB_DATABASE=${{ secrets.CHAT_MONGO_DB_DATABASE }} \
            --build-arg S3_ACCESS_KEY=${{ secrets.S3_ACCESS_KEY }} \
            --build-arg S3_SECRET_KEY=${{ secrets.S3_SECRET_KEY }} \
            --build-arg S3_URL_PREFIX=${{ secrets.S3_URL_PREFIX }} \
            --build-arg KAKAO_API_URL=${{ secrets.KAKAO_API_URL }} \
            --build-arg KAKAOPAY_SECRET_KEY=${{ secrets.KAKAOPAY_SECRET_KEY }} \
            --build-arg KAFKA_HOST1=${{ secrets.KAFKA_HOST1 }} \
            --build-arg KAFKA_PORT1=${{ secrets.KAFKA_PORT1 }} \
            -f ${{ matrix.dockerfile_path }} \
            -t ${{ matrix.image_name }} \
            ${{ matrix.build_context }}

      - name: Push the Docker image
        run: |
          docker push ${{ matrix.image_name }}

      - name: Get EC2 Instance IDs
        id: get_instances
        run: |
          INSTANCE_IDS=$(aws ec2 describe-instances \
            --region ap-northeast-2 \
            --filters 'Name=tag:Service,Values=back' \
                      'Name=tag:Index,Values=${{ matrix.instance_index }}' \
                      'Name=tag:Environment,Values=dev' \
                      'Name=tag:Type,Values=ec2' \
            --query 'Reservations[].Instances[].InstanceId' \
            --output text)
          echo "INSTANCE_IDS=$INSTANCE_IDS"
          echo "instance_ids=$INSTANCE_IDS" >> $GITHUB_OUTPUT

      - name: Deploy to EC2 instances
        run: |
          if [ -z "${{ steps.get_instances.outputs.instance_ids }}" ]; then
            echo "No instance IDs found for ${{ matrix.module }} module. Exiting."
            exit 1
          fi
          aws ssm send-command \
            --instance-ids "${{ steps.get_instances.outputs.instance_ids }}" \
            --document-name "AWS-RunShellScript" \
            --comment "Deploying ${{ matrix.module }} module" \
            --parameters commands='cd /home/ec2-user && docker-compose down -v --rmi all && docker-compose pull && docker-compose up -d' \
            --timeout-seconds 600 \
            --region ap-northeast-2

      - name: Wait for command to complete
        run: |
          echo "Deployment command sent for ${{ matrix.module }} module."