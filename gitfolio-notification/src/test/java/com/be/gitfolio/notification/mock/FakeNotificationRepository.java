package com.be.gitfolio.notification.mock;

import com.be.gitfolio.notification.domain.Notification;
import com.be.gitfolio.notification.service.port.NotificationRepository;

import java.util.ArrayList;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import java.util.stream.Collectors;

public class FakeNotificationRepository implements NotificationRepository {

    private Long autoGeneratedId = 0L;
    private List<Notification> data = new ArrayList<>();

    @Override
    public Notification save(Notification notification) {
        if (notification.getId() == null || notification.getId() == 0L) {
            Notification newNotification = Notification.builder()
                    .id(++autoGeneratedId)
                    .read(notification.isRead())
                    .senderNickname(notification.getSenderNickname())
                    .senderId(notification.getSenderId())
                    .receiverId(notification.getReceiverId())
                    .type(notification.getType())
                    .build();
            data.add(newNotification);
            return newNotification;
        } else {
            data.removeIf(item -> Objects.equals(item.getId(), notification.getId()));
            data.add(notification);
            return notification;
        }
    }

    @Override
    public Optional<Notification> findById(Long notificationId) {
        return data.stream().filter(item -> item.getId().equals(notificationId)).findAny();
    }

    @Override
    public List<Notification> findAllByReceiverIdAndReadFalse(Long receiverId) {
        return data.stream().filter(item -> item.getReceiverId().equals(receiverId) && !item.isRead()).collect(Collectors.toList());
    }
}
